import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
from datetime import datetime

class StudentDatabaseApp:
    def __init__(self, root):
        self.root = root
        self.root.title("База данных курсантов 1 факультета 1 курса ")
        self.root.geometry("800x600")
        
        # Подключение к базе данных
        self.conn = sqlite3.connect('students.db')
        self.cursor = self.conn.cursor()
        self.create_table()
        
        # Стили
        self.style = ttk.Style()
        self.style.configure('TButton', font=('Arial', 10), padding=5)
        self.style.configure('TLabel', font=('Arial', 10))
        self.style.configure('TEntry', font=('Arial', 10))
        
        # Основные фреймы
        self.input_frame = ttk.LabelFrame(root, text="Добавить студента", padding=10)
        self.input_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.search_frame = ttk.LabelFrame(root, text="Поиск студентов", padding=10)
        self.search_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.table_frame = ttk.Frame(root)
        self.table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Поля ввода
        ttk.Label(self.input_frame, text="ФИО:").grid(row=0, column=0, sticky=tk.W)
        self.name_entry = ttk.Entry(self.input_frame, width=40)
        self.name_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(self.input_frame, text="Год рождения:").grid(row=1, column=0, sticky=tk.W)
        self.year_entry = ttk.Entry(self.input_frame, width=10)
        self.year_entry.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)
        
        ttk.Label(self.input_frame, text="Номер группы:").grid(row=2, column=0, sticky=tk.W)
        self.group_entry = ttk.Entry(self.input_frame, width=15)
        self.group_entry.grid(row=2, column=1, padx=5, pady=5, sticky=tk.W)
        
        # Кнопки управления
        self.add_btn = ttk.Button(self.input_frame, text="Добавить", command=self.add_student)
        self.add_btn.grid(row=3, column=0, columnspan=2, pady=5)
        
        # Поиск
        ttk.Label(self.search_frame, text="Поиск:").grid(row=0, column=0, sticky=tk.W)
        self.search_entry = ttk.Entry(self.search_frame, width=40)
        self.search_entry.grid(row=0, column=1, padx=5, pady=5)
        
        self.search_btn = ttk.Button(self.search_frame, text="Найти", command=self.search_students)
        self.search_btn.grid(row=0, column=2, padx=5)
        
        self.show_all_btn = ttk.Button(self.search_frame, text="Показать всех", command=self.load_students)
        self.show_all_btn.grid(row=0, column=3, padx=5)
        
        # Таблица студентов
        self.tree = ttk.Treeview(self.table_frame, columns=('ID', 'Name', 'Year', 'Group'), show='headings')
        self.tree.heading('ID', text='ID', anchor=tk.CENTER)
        self.tree.heading('Name', text='ФИО', anchor=tk.CENTER)
        self.tree.heading('Year', text='Год рождения', anchor=tk.CENTER)
        self.tree.heading('Group', text='Группа', anchor=tk.CENTER)
        
        self.tree.column('ID', width=50, anchor=tk.CENTER)
        self.tree.column('Name', width=300, anchor=tk.W)
        self.tree.column('Year', width=100, anchor=tk.CENTER)
        self.tree.column('Group', width=100, anchor=tk.CENTER)
        
        self.scrollbar = ttk.Scrollbar(self.table_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=self.scrollbar.set)
        
        self.tree.grid(row=0, column=0, sticky='nsew')
        self.scrollbar.grid(row=0, column=1, sticky='ns')
        
        # Контекстное меню
        self.context_menu = tk.Menu(root, tearoff=0)
        self.context_menu.add_command(label="Удалить", command=self.delete_selected)
        
        self.tree.bind("<Button-3>", self.show_context_menu)
        
        # Загрузка данных
        self.load_students()
        
        # Настройка расширения таблицы
        self.table_frame.grid_rowconfigure(0, weight=1)
        self.table_frame.grid_columnconfigure(0, weight=1)
        
        # Обработка закрытия окна
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def create_table(self):
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            full_name TEXT NOT NULL,
            birth_year INTEGER NOT NULL,
            group_number TEXT NOT NULL
        )
        ''')
        self.conn.commit()

    def add_student(self):
        name = self.name_entry.get().strip()
        year = self.year_entry.get().strip()
        group = self.group_entry.get().strip()
        
        if not name or not year or not group:
            messagebox.showerror("Ошибка", "Все поля должны быть заполнены!")
            return
        
        try:
            year = int(year)
            current_year = datetime.now().year
            if not (1900 < year <= current_year):
                raise ValueError("Некорректный год рождения")
        except ValueError:
            messagebox.showerror("Ошибка", "Год рождения должен быть числом от 1901 до текущего года!")
            return
        
        try:
            self.cursor.execute(
                "INSERT INTO students (full_name, birth_year, group_number) VALUES (?, ?, ?)",
                (name, year, group)
            )
            self.conn.commit()
            messagebox.showinfo("Успех", "Курсант успешно добавлен!")
            self.name_entry.delete(0, tk.END)
            self.year_entry.delete(0, tk.END)
            self.group_entry.delete(0, tk.END)
            self.load_students()
        except Exception as e:
            messagebox.showerror("Ошибка", f"Не удалось добавить курсанта: {str(e)}")

    def load_students(self):
        for row in self.tree.get_children():
            self.tree.delete(row)
        
        self.cursor.execute("SELECT * FROM students ORDER BY full_name")
        students = self.cursor.fetchall()
        
        for student in students:
            self.tree.insert('', tk.END, values=student)

    def search_students(self):
        search_term = self.search_entry.get().strip()
        if not search_term:
            self.load_students()
            return
        
        for row in self.tree.get_children():
            self.tree.delete(row)
        
        self.cursor.execute(
            "SELECT * FROM students WHERE full_name LIKE ? OR group_number LIKE ? ORDER BY full_name",
            (f"%{search_term}%", f"%{search_term}%")
        )
        students = self.cursor.fetchall()
        
        if not students:
            messagebox.showinfo("Поиск", "Курсанты не найдены")
            return
        
        for student in students:
            self.tree.insert('', tk.END, values=student)

    def show_context_menu(self, event):
        item = self.tree.identify_row(event.y)
        if item:
            self.tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)

    def delete_selected(self):
        selected_item = self.tree.selection()
        if not selected_item:
            return
        
        student_id = self.tree.item(selected_item)['values'][0]
        
        if messagebox.askyesno("Подтверждение", "Вы уверены, что хотите удалить этого ккрсанта?"):
            try:
                self.cursor.execute("DELETE FROM students WHERE id = ?", (student_id,))
                self.conn.commit()
                self.load_students()
                messagebox.showinfo("Успех", "Студент успешно удален!")
            except Exception as e:
                messagebox.showerror("Ошибка", f"Не удалось удалить студента: {str(e)}")

    def on_close(self):
        if messagebox.askokcancel("Выход", "Вы уверены, что хотите выйти?"):
            self.conn.close()
            self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = StudentDatabaseApp(root)
    root.mainloop()
